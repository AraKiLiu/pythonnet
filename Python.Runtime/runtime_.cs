
namespace Python.Runtime {

    partial class Runtime {
        internal static void Py_IncRef(System.IntPtr ob) => LibPython.Py_IncRef(ob);
        internal static void Py_DecRef(System.IntPtr ob) => LibPython.Py_DecRef(ob);
        internal static void Py_InitializeEx(System.Int32 initsigs) => LibPython.Py_InitializeEx(initsigs);
        internal static System.Int32 Py_IsInitialized() => LibPython.Py_IsInitialized();
        internal static void Py_Finalize() => LibPython.Py_Finalize();
        internal static System.IntPtr PyGILState_Ensure() => LibPython.PyGILState_Ensure();
        internal static void PyGILState_Release(System.IntPtr gs) => LibPython.PyGILState_Release(gs);
        internal static void PyEval_InitThreads() => LibPython.PyEval_InitThreads();
        internal static System.Int32 PyEval_ThreadsInitialized() => LibPython.PyEval_ThreadsInitialized();
        internal static void PyEval_AcquireLock() => LibPython.PyEval_AcquireLock();
        internal static void PyEval_ReleaseLock() => LibPython.PyEval_ReleaseLock();
        internal static System.IntPtr PyEval_SaveThread() => LibPython.PyEval_SaveThread();
        internal static void PyEval_RestoreThread(System.IntPtr tstate) => LibPython.PyEval_RestoreThread(tstate);
        internal static System.IntPtr PyEval_GetBuiltins() => LibPython.PyEval_GetBuiltins();
        internal static System.IntPtr PyEval_GetGlobals() => LibPython.PyEval_GetGlobals();
        internal static System.IntPtr PyEval_GetLocals() => LibPython.PyEval_GetLocals();
        internal static System.IntPtr Py_GetProgramName() => LibPython.Py_GetProgramName();
        internal static void Py_SetProgramName(System.IntPtr name) => LibPython.Py_SetProgramName(name);
        internal static System.IntPtr Py_GetPythonHome() => LibPython.Py_GetPythonHome();
        internal static void Py_SetPythonHome(System.IntPtr home) => LibPython.Py_SetPythonHome(home);
        internal static System.IntPtr Py_GetPath() => LibPython.Py_GetPath();
        internal static void Py_SetPath(System.IntPtr home) => LibPython.Py_SetPath(home);
        internal static System.IntPtr Py_GetVersion() => LibPython.Py_GetVersion();
        internal static System.IntPtr Py_GetPlatform() => LibPython.Py_GetPlatform();
        internal static System.IntPtr Py_GetCopyright() => LibPython.Py_GetCopyright();
        internal static System.IntPtr Py_GetCompiler() => LibPython.Py_GetCompiler();
        internal static System.IntPtr Py_GetBuildInfo() => LibPython.Py_GetBuildInfo();
        internal static System.Int32 PyRun_SimpleString(System.String code) => LibPython.PyRun_SimpleString(code);
        internal static System.IntPtr PyRun_String(System.String code, System.IntPtr st, System.IntPtr globals, System.IntPtr locals) => LibPython.PyRun_String(code, st, globals, locals);
        internal static System.IntPtr PyEval_EvalCode(System.IntPtr co, System.IntPtr globals, System.IntPtr locals) => LibPython.PyEval_EvalCode(co, globals, locals);
        internal static System.IntPtr Py_CompileString(System.String code, System.String file, System.IntPtr tok) => LibPython.Py_CompileString(code, file, tok);
        internal static System.IntPtr PyImport_ExecCodeModule(System.String name, System.IntPtr code) => LibPython.PyImport_ExecCodeModule(name, code);
        internal static System.IntPtr PyCFunction_NewEx(System.IntPtr ml, System.IntPtr self, System.IntPtr mod) => LibPython.PyCFunction_NewEx(ml, self, mod);
        internal static System.IntPtr PyCFunction_Call(System.IntPtr func, System.IntPtr args, System.IntPtr kw) => LibPython.PyCFunction_Call(func, args, kw);
        internal static System.IntPtr PyInstance_New(System.IntPtr cls, System.IntPtr args, System.IntPtr kw) => LibPython.PyInstance_New(cls, args, kw);
        internal static System.IntPtr PyInstance_NewRaw(System.IntPtr cls, System.IntPtr dict) => LibPython.PyInstance_NewRaw(cls, dict);
        internal static System.IntPtr PyMethod_New(System.IntPtr func, System.IntPtr self, System.IntPtr cls) => LibPython.PyMethod_New(func, self, cls);
        internal static System.Int32 PyObject_HasAttrString(System.IntPtr pointer, System.String name) => LibPython.PyObject_HasAttrString(pointer, name);
        internal static System.IntPtr PyObject_GetAttrString(System.IntPtr pointer, System.String name) => LibPython.PyObject_GetAttrString(pointer, name);
        internal static System.Int32 PyObject_SetAttrString(System.IntPtr pointer, System.String name, System.IntPtr value) => LibPython.PyObject_SetAttrString(pointer, name, value);
        internal static System.Int32 PyObject_HasAttr(System.IntPtr pointer, System.IntPtr name) => LibPython.PyObject_HasAttr(pointer, name);
        internal static System.IntPtr PyObject_GetAttr(System.IntPtr pointer, System.IntPtr name) => LibPython.PyObject_GetAttr(pointer, name);
        internal static System.Int32 PyObject_SetAttr(System.IntPtr pointer, System.IntPtr name, System.IntPtr value) => LibPython.PyObject_SetAttr(pointer, name, value);
        internal static System.IntPtr PyObject_GetItem(System.IntPtr pointer, System.IntPtr key) => LibPython.PyObject_GetItem(pointer, key);
        internal static System.Int32 PyObject_SetItem(System.IntPtr pointer, System.IntPtr key, System.IntPtr value) => LibPython.PyObject_SetItem(pointer, key, value);
        internal static System.Int32 PyObject_DelItem(System.IntPtr pointer, System.IntPtr key) => LibPython.PyObject_DelItem(pointer, key);
        internal static System.IntPtr PyObject_GetIter(System.IntPtr op) => LibPython.PyObject_GetIter(op);
        internal static System.IntPtr PyObject_Call(System.IntPtr pointer, System.IntPtr args, System.IntPtr kw) => LibPython.PyObject_Call(pointer, args, kw);
        internal static System.IntPtr PyObject_CallObject(System.IntPtr pointer, System.IntPtr args) => LibPython.PyObject_CallObject(pointer, args);
        internal static System.Int32 PyObject_RichCompareBool(System.IntPtr value1, System.IntPtr value2, System.Int32 opid) => LibPython.PyObject_RichCompareBool(value1, value2, opid);
        internal static System.Int32 PyObject_IsInstance(System.IntPtr ob, System.IntPtr type) => LibPython.PyObject_IsInstance(ob, type);
        internal static System.Int32 PyObject_IsSubclass(System.IntPtr ob, System.IntPtr type) => LibPython.PyObject_IsSubclass(ob, type);
        internal static System.Int32 PyCallable_Check(System.IntPtr pointer) => LibPython.PyCallable_Check(pointer);
        internal static System.Int32 PyObject_IsTrue(System.IntPtr pointer) => LibPython.PyObject_IsTrue(pointer);
        internal static System.Int32 PyObject_Not(System.IntPtr pointer) => LibPython.PyObject_Not(pointer);
        internal static System.IntPtr _PyObject_Size(System.IntPtr pointer) => LibPython._PyObject_Size(pointer);
        internal static System.IntPtr PyObject_Hash(System.IntPtr op) => LibPython.PyObject_Hash(op);
        internal static System.IntPtr PyObject_Repr(System.IntPtr pointer) => LibPython.PyObject_Repr(pointer);
        internal static System.IntPtr PyObject_Str(System.IntPtr pointer) => LibPython.PyObject_Str(pointer);
        internal static System.IntPtr PyObject_Unicode(System.IntPtr pointer) => LibPython.PyObject_Unicode(pointer);
        internal static System.IntPtr PyObject_Dir(System.IntPtr pointer) => LibPython.PyObject_Dir(pointer);
        internal static System.IntPtr PyNumber_Int(System.IntPtr ob) => LibPython.PyNumber_Int(ob);
        internal static System.IntPtr PyNumber_Long(System.IntPtr ob) => LibPython.PyNumber_Long(ob);
        internal static System.IntPtr PyNumber_Float(System.IntPtr ob) => LibPython.PyNumber_Float(ob);
        internal static System.Boolean PyNumber_Check(System.IntPtr ob) => LibPython.PyNumber_Check(ob);
        internal static System.IntPtr PyInt_FromLong(System.IntPtr value) => LibPython.PyInt_FromLong(value);
        internal static System.Int32 PyInt_AsLong(System.IntPtr value) => LibPython.PyInt_AsLong(value);
        internal static System.IntPtr PyInt_FromString(System.String value, System.IntPtr end, System.Int32 radix) => LibPython.PyInt_FromString(value, end, radix);
        internal static System.IntPtr PyLong_FromLong(System.Int64 value) => LibPython.PyLong_FromLong(value);
        internal static System.IntPtr PyLong_FromUnsignedLong32(System.UInt32 value) => LibPython.PyLong_FromUnsignedLong32(value);
        internal static System.IntPtr PyLong_FromUnsignedLong64(System.UInt64 value) => LibPython.PyLong_FromUnsignedLong64(value);
        internal static System.IntPtr PyLong_FromDouble(System.Double value) => LibPython.PyLong_FromDouble(value);
        internal static System.IntPtr PyLong_FromLongLong(System.Int64 value) => LibPython.PyLong_FromLongLong(value);
        internal static System.IntPtr PyLong_FromUnsignedLongLong(System.UInt64 value) => LibPython.PyLong_FromUnsignedLongLong(value);
        internal static System.IntPtr PyLong_FromString(System.String value, System.IntPtr end, System.Int32 radix) => LibPython.PyLong_FromString(value, end, radix);
        internal static System.Int32 PyLong_AsLong(System.IntPtr value) => LibPython.PyLong_AsLong(value);
        internal static System.UInt32 PyLong_AsUnsignedLong32(System.IntPtr value) => LibPython.PyLong_AsUnsignedLong32(value);
        internal static System.UInt64 PyLong_AsUnsignedLong64(System.IntPtr value) => LibPython.PyLong_AsUnsignedLong64(value);
        internal static System.Int64 PyLong_AsLongLong(System.IntPtr value) => LibPython.PyLong_AsLongLong(value);
        internal static System.UInt64 PyLong_AsUnsignedLongLong(System.IntPtr value) => LibPython.PyLong_AsUnsignedLongLong(value);
        internal static System.IntPtr PyFloat_FromDouble(System.Double value) => LibPython.PyFloat_FromDouble(value);
        internal static System.IntPtr PyFloat_FromString(System.IntPtr value, System.IntPtr junk) => LibPython.PyFloat_FromString(value, junk);
        internal static System.Double PyFloat_AsDouble(System.IntPtr ob) => LibPython.PyFloat_AsDouble(ob);
        internal static System.IntPtr PyNumber_Add(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Add(o1, o2);
        internal static System.IntPtr PyNumber_Subtract(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Subtract(o1, o2);
        internal static System.IntPtr PyNumber_Multiply(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Multiply(o1, o2);
        internal static System.IntPtr PyNumber_TrueDivide(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_TrueDivide(o1, o2);
        internal static System.IntPtr PyNumber_And(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_And(o1, o2);
        internal static System.IntPtr PyNumber_Xor(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Xor(o1, o2);
        internal static System.IntPtr PyNumber_Or(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Or(o1, o2);
        internal static System.IntPtr PyNumber_Lshift(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Lshift(o1, o2);
        internal static System.IntPtr PyNumber_Rshift(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Rshift(o1, o2);
        internal static System.IntPtr PyNumber_Power(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Power(o1, o2);
        internal static System.IntPtr PyNumber_Remainder(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_Remainder(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceAdd(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceAdd(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceSubtract(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceSubtract(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceMultiply(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceMultiply(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceTrueDivide(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceTrueDivide(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceAnd(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceAnd(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceXor(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceXor(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceOr(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceOr(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceLshift(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceLshift(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceRshift(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceRshift(o1, o2);
        internal static System.IntPtr PyNumber_InPlacePower(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlacePower(o1, o2);
        internal static System.IntPtr PyNumber_InPlaceRemainder(System.IntPtr o1, System.IntPtr o2) => LibPython.PyNumber_InPlaceRemainder(o1, o2);
        internal static System.IntPtr PyNumber_Negative(System.IntPtr o1) => LibPython.PyNumber_Negative(o1);
        internal static System.IntPtr PyNumber_Positive(System.IntPtr o1) => LibPython.PyNumber_Positive(o1);
        internal static System.IntPtr PyNumber_Invert(System.IntPtr o1) => LibPython.PyNumber_Invert(o1);
        internal static System.Boolean PySequence_Check(System.IntPtr pointer) => LibPython.PySequence_Check(pointer);
        internal static System.IntPtr PySequence_GetItem(System.IntPtr pointer, System.IntPtr index) => LibPython.PySequence_GetItem(pointer, index);
        internal static System.Int32 PySequence_SetItem(System.IntPtr pointer, System.IntPtr index, System.IntPtr value) => LibPython.PySequence_SetItem(pointer, index, value);
        internal static System.Int32 PySequence_DelItem(System.IntPtr pointer, System.IntPtr index) => LibPython.PySequence_DelItem(pointer, index);
        internal static System.IntPtr PySequence_GetSlice(System.IntPtr pointer, System.IntPtr i1, System.IntPtr i2) => LibPython.PySequence_GetSlice(pointer, i1, i2);
        internal static System.Int32 PySequence_SetSlice(System.IntPtr pointer, System.IntPtr i1, System.IntPtr i2, System.IntPtr v) => LibPython.PySequence_SetSlice(pointer, i1, i2, v);
        internal static System.Int32 PySequence_DelSlice(System.IntPtr pointer, System.IntPtr i1, System.IntPtr i2) => LibPython.PySequence_DelSlice(pointer, i1, i2);
        internal static System.IntPtr _PySequence_Size(System.IntPtr pointer) => LibPython._PySequence_Size(pointer);
        internal static System.Int32 PySequence_Contains(System.IntPtr pointer, System.IntPtr item) => LibPython.PySequence_Contains(pointer, item);
        internal static System.IntPtr PySequence_Concat(System.IntPtr pointer, System.IntPtr other) => LibPython.PySequence_Concat(pointer, other);
        internal static System.IntPtr PySequence_Repeat(System.IntPtr pointer, System.IntPtr count) => LibPython.PySequence_Repeat(pointer, count);
        internal static System.Int32 PySequence_Index(System.IntPtr pointer, System.IntPtr item) => LibPython.PySequence_Index(pointer, item);
        internal static System.IntPtr _PySequence_Count(System.IntPtr pointer, System.IntPtr value) => LibPython._PySequence_Count(pointer, value);
        internal static System.IntPtr PySequence_Tuple(System.IntPtr pointer) => LibPython.PySequence_Tuple(pointer);
        internal static System.IntPtr PySequence_List(System.IntPtr pointer) => LibPython.PySequence_List(pointer);
        internal static System.IntPtr PyBytes_FromString(System.String op) => LibPython.PyBytes_FromString(op);
        internal static System.IntPtr _PyBytes_Size(System.IntPtr op) => LibPython._PyBytes_Size(op);
        internal static System.IntPtr _PyString_FromStringAndSize(System.String value, System.IntPtr size) => LibPython._PyString_FromStringAndSize(value, size);
        internal static System.IntPtr PyUnicode_FromStringAndSize(System.IntPtr value, System.IntPtr size) => LibPython.PyUnicode_FromStringAndSize(value, size);
        internal static System.IntPtr PyUnicode_FromOrdinal(System.Int32 c) => LibPython.PyUnicode_FromOrdinal(c);
        internal static System.IntPtr PyUnicode_AsUnicode(System.IntPtr ob) => LibPython.PyUnicode_AsUnicode(ob);
        internal static System.IntPtr PyUnicode_FromObject(System.IntPtr ob) => LibPython.PyUnicode_FromObject(ob);
        internal static System.IntPtr PyUnicode_FromEncodedObject(System.IntPtr ob, System.IntPtr enc, System.IntPtr err) => LibPython.PyUnicode_FromEncodedObject(ob, enc, err);
        internal static System.IntPtr _PyUnicode_GetSize(System.IntPtr ob) => LibPython._PyUnicode_GetSize(ob);
        internal static System.IntPtr PyUnicode_FromKindAndData(System.Int32 kind, System.String s, System.IntPtr size) => LibPython.PyUnicode_FromKindAndData(kind, s, size);
        internal static System.IntPtr PyDict_New() => LibPython.PyDict_New();
        internal static System.IntPtr PyDictProxy_New(System.IntPtr dict) => LibPython.PyDictProxy_New(dict);
        internal static System.IntPtr PyDict_GetItem(System.IntPtr pointer, System.IntPtr key) => LibPython.PyDict_GetItem(pointer, key);
        internal static System.IntPtr PyDict_GetItemString(System.IntPtr pointer, System.String key) => LibPython.PyDict_GetItemString(pointer, key);
        internal static System.Int32 PyDict_SetItem(System.IntPtr pointer, System.IntPtr key, System.IntPtr value) => LibPython.PyDict_SetItem(pointer, key, value);
        internal static System.Int32 PyDict_SetItemString(System.IntPtr pointer, System.String key, System.IntPtr value) => LibPython.PyDict_SetItemString(pointer, key, value);
        internal static System.Int32 PyDict_DelItem(System.IntPtr pointer, System.IntPtr key) => LibPython.PyDict_DelItem(pointer, key);
        internal static System.Int32 PyDict_DelItemString(System.IntPtr pointer, System.String key) => LibPython.PyDict_DelItemString(pointer, key);
        internal static System.Int32 PyMapping_HasKey(System.IntPtr pointer, System.IntPtr key) => LibPython.PyMapping_HasKey(pointer, key);
        internal static System.IntPtr PyDict_Keys(System.IntPtr pointer) => LibPython.PyDict_Keys(pointer);
        internal static System.IntPtr PyDict_Values(System.IntPtr pointer) => LibPython.PyDict_Values(pointer);
        internal static System.IntPtr PyDict_Items(System.IntPtr pointer) => LibPython.PyDict_Items(pointer);
        internal static System.IntPtr PyDict_Copy(System.IntPtr pointer) => LibPython.PyDict_Copy(pointer);
        internal static System.Int32 PyDict_Update(System.IntPtr pointer, System.IntPtr other) => LibPython.PyDict_Update(pointer, other);
        internal static void PyDict_Clear(System.IntPtr pointer) => LibPython.PyDict_Clear(pointer);
        internal static System.IntPtr _PyDict_Size(System.IntPtr pointer) => LibPython._PyDict_Size(pointer);
        internal static System.IntPtr PyList_New(System.IntPtr size) => LibPython.PyList_New(size);
        internal static System.IntPtr PyList_AsTuple(System.IntPtr pointer) => LibPython.PyList_AsTuple(pointer);
        internal static System.IntPtr PyList_GetItem(System.IntPtr pointer, System.IntPtr index) => LibPython.PyList_GetItem(pointer, index);
        internal static System.Int32 PyList_SetItem(System.IntPtr pointer, System.IntPtr index, System.IntPtr value) => LibPython.PyList_SetItem(pointer, index, value);
        internal static System.Int32 PyList_Insert(System.IntPtr pointer, System.IntPtr index, System.IntPtr value) => LibPython.PyList_Insert(pointer, index, value);
        internal static System.Int32 PyList_Append(System.IntPtr pointer, System.IntPtr value) => LibPython.PyList_Append(pointer, value);
        internal static System.Int32 PyList_Reverse(System.IntPtr pointer) => LibPython.PyList_Reverse(pointer);
        internal static System.Int32 PyList_Sort(System.IntPtr pointer) => LibPython.PyList_Sort(pointer);
        internal static System.IntPtr PyList_GetSlice(System.IntPtr pointer, System.IntPtr start, System.IntPtr end) => LibPython.PyList_GetSlice(pointer, start, end);
        internal static System.Int32 PyList_SetSlice(System.IntPtr pointer, System.IntPtr start, System.IntPtr end, System.IntPtr value) => LibPython.PyList_SetSlice(pointer, start, end, value);
        internal static System.IntPtr _PyList_Size(System.IntPtr pointer) => LibPython._PyList_Size(pointer);
        internal static System.IntPtr PyTuple_New(System.IntPtr size) => LibPython.PyTuple_New(size);
        internal static System.IntPtr PyTuple_GetItem(System.IntPtr pointer, System.IntPtr index) => LibPython.PyTuple_GetItem(pointer, index);
        internal static System.Int32 PyTuple_SetItem(System.IntPtr pointer, System.IntPtr index, System.IntPtr value) => LibPython.PyTuple_SetItem(pointer, index, value);
        internal static System.IntPtr PyTuple_GetSlice(System.IntPtr pointer, System.IntPtr start, System.IntPtr end) => LibPython.PyTuple_GetSlice(pointer, start, end);
        internal static System.IntPtr _PyTuple_Size(System.IntPtr pointer) => LibPython._PyTuple_Size(pointer);
        internal static System.IntPtr PyIter_Next(System.IntPtr pointer) => LibPython.PyIter_Next(pointer);
        internal static System.IntPtr PyModule_New(System.String name) => LibPython.PyModule_New(name);
        internal static System.String PyModule_GetName(System.IntPtr module) => LibPython.PyModule_GetName(module);
        internal static System.IntPtr PyModule_GetDict(System.IntPtr module) => LibPython.PyModule_GetDict(module);
        internal static System.String PyModule_GetFilename(System.IntPtr module) => LibPython.PyModule_GetFilename(module);
        internal static System.IntPtr PyModule_Create2(System.IntPtr module, System.Int32 apiver) => LibPython.PyModule_Create2(module, apiver);
        internal static System.IntPtr PyImport_Import(System.IntPtr name) => LibPython.PyImport_Import(name);
        internal static System.IntPtr PyImport_ImportModule(System.String name) => LibPython.PyImport_ImportModule(name);
        internal static System.IntPtr PyImport_ReloadModule(System.IntPtr module) => LibPython.PyImport_ReloadModule(module);
        internal static System.IntPtr PyImport_AddModule(System.String name) => LibPython.PyImport_AddModule(name);
        internal static System.IntPtr PyImport_GetModuleDict() => LibPython.PyImport_GetModuleDict();
        internal static void PySys_SetArgvEx(System.Int32 argc, System.String[] argv, System.Int32 updatepath) => LibPython.PySys_SetArgvEx(argc, argv, updatepath);
        internal static System.IntPtr PySys_GetObject(System.String name) => LibPython.PySys_GetObject(name);
        internal static System.Int32 PySys_SetObject(System.String name, System.IntPtr ob) => LibPython.PySys_SetObject(name, ob);
        internal static void PyType_Modified(System.IntPtr type) => LibPython.PyType_Modified(type);
        internal static System.Boolean PyType_IsSubtype(System.IntPtr t1, System.IntPtr t2) => LibPython.PyType_IsSubtype(t1, t2);
        internal static System.IntPtr PyType_GenericNew(System.IntPtr type, System.IntPtr args, System.IntPtr kw) => LibPython.PyType_GenericNew(type, args, kw);
        internal static System.IntPtr PyType_GenericAlloc(System.IntPtr type, System.IntPtr n) => LibPython.PyType_GenericAlloc(type, n);
        internal static System.Int32 PyType_Ready(System.IntPtr type) => LibPython.PyType_Ready(type);
        internal static System.IntPtr _PyType_Lookup(System.IntPtr type, System.IntPtr name) => LibPython._PyType_Lookup(type, name);
        internal static System.IntPtr PyObject_GenericGetAttr(System.IntPtr obj, System.IntPtr name) => LibPython.PyObject_GenericGetAttr(obj, name);
        internal static System.Int32 PyObject_GenericSetAttr(System.IntPtr obj, System.IntPtr name, System.IntPtr value) => LibPython.PyObject_GenericSetAttr(obj, name, value);
        internal static System.IntPtr _PyObject_GetDictPtr(System.IntPtr obj) => LibPython._PyObject_GetDictPtr(obj);
        internal static System.IntPtr PyObject_GC_New(System.IntPtr tp) => LibPython.PyObject_GC_New(tp);
        internal static void PyObject_GC_Del(System.IntPtr tp) => LibPython.PyObject_GC_Del(tp);
        internal static void PyObject_GC_Track(System.IntPtr tp) => LibPython.PyObject_GC_Track(tp);
        internal static void PyObject_GC_UnTrack(System.IntPtr tp) => LibPython.PyObject_GC_UnTrack(tp);
        internal static System.IntPtr PyMem_Malloc(System.IntPtr size) => LibPython.PyMem_Malloc(size);
        internal static System.IntPtr PyMem_Realloc(System.IntPtr ptr, System.IntPtr size) => LibPython.PyMem_Realloc(ptr, size);
        internal static void PyMem_Free(System.IntPtr ptr) => LibPython.PyMem_Free(ptr);
        internal static void PyErr_SetString(System.IntPtr ob, System.String message) => LibPython.PyErr_SetString(ob, message);
        internal static void PyErr_SetObject(System.IntPtr ob, System.IntPtr message) => LibPython.PyErr_SetObject(ob, message);
        internal static System.IntPtr PyErr_SetFromErrno(System.IntPtr ob) => LibPython.PyErr_SetFromErrno(ob);
        internal static void PyErr_SetNone(System.IntPtr ob) => LibPython.PyErr_SetNone(ob);
        internal static System.Int32 PyErr_ExceptionMatches(System.IntPtr exception) => LibPython.PyErr_ExceptionMatches(exception);
        internal static System.Int32 PyErr_GivenExceptionMatches(System.IntPtr ob, System.IntPtr val) => LibPython.PyErr_GivenExceptionMatches(ob, val);
        internal static void PyErr_NormalizeException(System.IntPtr ob, System.IntPtr val, System.IntPtr tb) => LibPython.PyErr_NormalizeException(ob, val, tb);
        internal static System.IntPtr PyErr_Occurred() => LibPython.PyErr_Occurred();
        internal static void PyErr_Fetch(ref System.IntPtr ob, ref System.IntPtr val, ref System.IntPtr tb) => LibPython.PyErr_Fetch(ob, val, tb);
        internal static void PyErr_Restore(System.IntPtr ob, System.IntPtr val, System.IntPtr tb) => LibPython.PyErr_Restore(ob, val, tb);
        internal static void PyErr_Clear() => LibPython.PyErr_Clear();
        internal static void PyErr_Print() => LibPython.PyErr_Print();
        internal static System.IntPtr PyMethod_Self(System.IntPtr ob) => LibPython.PyMethod_Self(ob);
        internal static System.IntPtr PyMethod_Function(System.IntPtr ob) => LibPython.PyMethod_Function(ob);
        internal static System.Int32 Py_AddPendingCall(System.IntPtr func, System.IntPtr arg) => LibPython.Py_AddPendingCall(func, arg);
        internal static System.Int32 Py_MakePendingCalls() => LibPython.Py_MakePendingCalls();
        internal static System.Int32 get_Py_NoSiteFlag() => LibPython.get_Py_NoSiteFlag();
        internal static void set_Py_NoSiteFlag(System.Int32 value) => LibPython.set_Py_NoSiteFlag(value);
    }
}
